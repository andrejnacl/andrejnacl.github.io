<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Image</title>
    <style>
        canvas {
            border: 1px solid #000;
        }
    </style>
</head>
<body>

<canvas id="interactiveCanvas" width="500" height="500"></canvas>

<script>
    // Get the canvas element and its context
    const canvas = document.getElementById('interactiveCanvas');
    const ctx = canvas.getContext('2d');

    // Define the size of the grid
    const rows = 5;
    const cols = 5;

    // Calculate the size of each grid cell
    const cellWidth = canvas.width / cols;
    const cellHeight = canvas.height / rows;

    // Create an array to store the links for each cell
    const links = [
        ["#", "#", "#", "#", "#"],
        ["#", "#", "#", "#", "#"],
        ["#", "#", "#", "#", "#"],
        ["#", "#", "#", "#", "#"],
        ["#", "#", "#", "#", "#"]
    ];

    // Set the background image
    const backgroundImage = new Image();
    backgroundImage.src = 'path/to/your/image.jpg'; // Provide the path to your image

    backgroundImage.onload = function () {
        drawGrid();
        // Draw the background image
        ctx.drawImage(backgroundImage, 0, 0, canvas.width, canvas.height);
    };

    // Draw the initial grid
    function drawGrid() {
        for (let i = 0; i < rows; i++) {
            for (let j = 0; j < cols; j++) {
                ctx.strokeRect(j * cellWidth, i * cellHeight, cellWidth, cellHeight);
            }
        }
    }

    // Handle click events on the canvas
    canvas.addEventListener('click', function (event) {
        const rect = canvas.getBoundingClientRect();
        const mouseX = event.clientX - rect.left;
        const mouseY = event.clientY - rect.top;

        // Calculate the grid cell clicked
        const clickedRow = Math.floor(mouseY / cellHeight);
        const clickedCol = Math.floor(mouseX / cellWidth);

        // Get the link for the clicked cell
        const link = links[clickedRow][clickedCol];

        // Rotate the clicked cell
        rotateCell(clickedRow, clickedCol);

        // Open the link in a new tab/window after a short delay
        setTimeout(function () {
            window.open(link, '_blank');
        }, 500); // Adjust the delay as needed
    });

    // Rotate a specific cell
    function rotateCell(row, col) {
        const rotationDuration = 500; // in milliseconds
        const initialAngle = 0;
        const finalAngle = Math.PI / 2; // 90 degrees

        let start;

        function animate(timestamp) {
            if (!start) start = timestamp;
            const progress = timestamp - start;

            ctx.clearRect(col * cellWidth, row * cellHeight, cellWidth, cellHeight);
            ctx.save();
            ctx.translate(col * cellWidth + cellWidth / 2, row * cellHeight + cellHeight / 2);
            ctx.rotate((progress / rotationDuration) * finalAngle);
            ctx.drawImage(backgroundImage, -canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height);
            ctx.strokeRect(-cellWidth / 2, -cellHeight / 2, cellWidth, cellHeight);
            ctx.restore();

            if (progress < rotationDuration) {
                requestAnimationFrame(animate);
            }
        }

        requestAnimationFrame(animate);
    }

</script>

</body>
</html>
